/*!
 * \file	jtag.h
 * \brief	jtag library header file
 * \author	shopov
 *
 *
 * Revision summary:
 *
 * $Log: $
 */


/*! jtag tap controller state enumerator */
enum JTAG_TAP_STATE_ENUM
{
	/*! test logic reset */
	TEST_LOGIC_RESET = 0xf,
	/*! run test/idle */
	RUN_TEST_IDLE = 0xc,
	/*! select data register(dr) scan */
	SELECT_DR_SCAN = 7,
	/*! select instruction register(ir) scan */
	SELECT_IR_SCAN = 4,
	/*! capture dr */
	CAPTURE_DR = 6,
	/*! capture ir */
	CAPTURE_IR = 0xe,
	/*! shift dr */
	SHIFT_DR = 2,
	/*! shift ir */
	SHIFT_IR = 0xa,
	/*! exit1 dr */
	EXIT1_DR = 1,
	/*! exit1 ir */
	EXIT1_IR = 9,
	/*! pause dr */
	PAUSE_DR = 3,
	/*! pause ir */
	PAUSE_IR = 0xb,
	/*! exit2 dr */
	EXIT2_DR = 0,
	/*! exit2 ir */
	EXIT2_IR = 8,
	/*! update dr */
	UPDATE_DR = 5,
	/*! update ir */
	UPDATE_IR = 0xd,
	/*! total number of tap controller states */
	NR_JTAG_TAP_STATES = 16,
};


/*! define this if you need the tap state machine state transition data below */
#ifdef NEED_JTAG_TAP_TRANSITIONS

/*! the jtag tap controller state machine transition graph
 *
 * this is made static so that it is copied only to the data of modules
 * that need it and have defined the ::NEED_TAP_TRANSITIONS macro;
 * each element in the table corresponds to one of the tap controller states and
 * contains the states that the tap controller moves to when it sees the
 * test mode select (tms) signal low (0) or high (1) at the rising
 * edge of the test clock (tck) signal
 */
static struct
{
	/*! state to which a transition occurs when tms is low */
	enum JTAG_TAP_STATE_ENUM	tms_0;
	/*! state to which a transition occurs when tms is high */
	enum JTAG_TAP_STATE_ENUM	tms_1;
}
jtag_tap_state_transitions[NR_JTAG_TAP_STATES] =
{
	/*! 	EXIT2_DR		*/
	{	SHIFT_DR,	UPDATE_DR		},
	/*! 	EXIT1_DR		*/
	{	PAUSE_DR,	UPDATE_DR		},
	/*! 	SHIFT_DR		*/
	{	SHIFT_DR,	EXIT1_DR		},
	/*! 	PAUSE_DR		*/
	{	PAUSE_DR,	EXIT2_DR		},
	/*! 	SELECT_IR_SCAN		*/
	{	CAPTURE_IR,	TEST_LOGIC_RESET	},
	/*! 	UPDATE_DR		*/
	{	RUN_TEST_IDLE,	SELECT_DR_SCAN		},
	/*! 	CAPTURE_DR		*/
	{	SHIFT_DR,	EXIT1_DR		},
	/*! 	SELECT_DR_SCAN		*/
	{	CAPTURE_DR,	SELECT_IR_SCAN		},
	/*! 	EXIT2_IR		*/
	{	SHIFT_IR,	UPDATE_IR		},
	/*! 	EXIT1_IR		*/
	{	PAUSE_IR,	UPDATE_IR		},
	/*! 	SHIFT_IR		*/
	{	SHIFT_IR,	EXIT1_IR		},
	/*! 	PAUSE_IR		*/
	{	PAUSE_IR,	EXIT2_IR		},
	/*! 	RUN_TEST_IDLE		*/
	{	RUN_TEST_IDLE,	SELECT_DR_SCAN		},
	/*! 	UPDATE_IR		*/
	{	RUN_TEST_IDLE,	SELECT_DR_SCAN		},
	/*! 	CAPTURE_IR		*/
	{	SHIFT_IR,	EXIT1_IR		},
	/*! 	TEST_LOGIC_RESET	*/
	{	RUN_TEST_IDLE,	TEST_LOGIC_RESET	},
};
#endif /* NEED_JTAG_TAP_TRANSITIONS */

/*! define this if you need the jtag state transition sequences table below */
#ifdef NEED_JTAG_TAP_SEQUENCE_TABLE
/*! jtag state transition sequences table
 *
 * this table gives the tms sequence, lsb first, and the sequence length, to clock out in order to
 * get from state x to state y in the jtag tap controller state machine
 *
 * \note	table is automatically generated by jtag_utils.c
 */
static struct
{
	/*! the tms sequence to get from state x to state (x and y - indices in the table below), lsb first */
	unsigned int	seq;
	/*! length of the sequence, number of tms bits to clock out */
	unsigned int	len;
}
jtag_seq_tab[NR_JTAG_TAP_STATES][NR_JTAG_TAP_STATES] =
{
/* state 0 */
        {       { 0x000a, 4 }, { 0x0002, 2 }, { 0x0000, 1 }, { 0x0002, 3 }, { 0x0007, 3 }, { 0x0001, 1 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x0057, 7 }, { 0x0017, 5 }, { 0x0007, 5 }, { 0x0017, 6 }, { 0x0001, 2 }, { 0x0037, 6 }, { 0x0007, 4 }, { 0x000f, 4 },     },
/* state 1 */
        {       { 0x0002, 2 }, { 0x000a, 4 }, { 0x0002, 3 }, { 0x0000, 1 }, { 0x0007, 3 }, { 0x0001, 1 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x0057, 7 }, { 0x0017, 5 }, { 0x0007, 5 }, { 0x0017, 6 }, { 0x0001, 2 }, { 0x0037, 6 }, { 0x0007, 4 }, { 0x000f, 4 },     },
/* state 2 */
        {       { 0x0005, 3 }, { 0x0001, 1 }, { 0x0000, 1 }, { 0x0001, 2 }, { 0x000f, 4 }, { 0x0003, 2 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x00af, 8 }, { 0x002f, 6 }, { 0x000f, 6 }, { 0x002f, 7 }, { 0x0003, 3 }, { 0x006f, 7 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 3 */
        {       { 0x0001, 1 }, { 0x0005, 3 }, { 0x0001, 2 }, { 0x0000, 1 }, { 0x000f, 4 }, { 0x0003, 2 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x00af, 8 }, { 0x002f, 6 }, { 0x000f, 6 }, { 0x002f, 7 }, { 0x0003, 3 }, { 0x006f, 7 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 4 */
        {       { 0x0055, 7 }, { 0x0015, 5 }, { 0x0005, 5 }, { 0x0015, 6 }, { 0x000d, 4 }, { 0x0035, 6 }, { 0x0005, 4 }, { 0x0005, 3 }, { 0x000a, 4 }, { 0x0002, 2 }, { 0x0000, 2 }, { 0x0002, 3 }, { 0x0001, 2 }, { 0x0006, 3 }, { 0x0000, 1 }, { 0x0001, 1 },     },
/* state 5 */
        {       { 0x0015, 5 }, { 0x0005, 3 }, { 0x0001, 3 }, { 0x0005, 4 }, { 0x0003, 2 }, { 0x000d, 4 }, { 0x0001, 2 }, { 0x0001, 1 }, { 0x002b, 6 }, { 0x000b, 4 }, { 0x0003, 4 }, { 0x000b, 5 }, { 0x0000, 1 }, { 0x001b, 5 }, { 0x0003, 3 }, { 0x0007, 3 },     },
/* state 6 */
        {       { 0x0005, 3 }, { 0x0001, 1 }, { 0x0000, 1 }, { 0x0001, 2 }, { 0x000f, 4 }, { 0x0003, 2 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x00af, 8 }, { 0x002f, 6 }, { 0x000f, 6 }, { 0x002f, 7 }, { 0x0003, 3 }, { 0x006f, 7 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 7 */
        {       { 0x000a, 4 }, { 0x0002, 2 }, { 0x0000, 2 }, { 0x0002, 3 }, { 0x0001, 1 }, { 0x0006, 3 }, { 0x0000, 1 }, { 0x000e, 4 }, { 0x0015, 5 }, { 0x0005, 3 }, { 0x0001, 3 }, { 0x0005, 4 }, { 0x0003, 3 }, { 0x000d, 4 }, { 0x0001, 2 }, { 0x0003, 2 },     },
/* state 8 */
        {       { 0x002b, 6 }, { 0x000b, 4 }, { 0x0003, 4 }, { 0x000b, 5 }, { 0x0007, 3 }, { 0x001b, 5 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x000a, 4 }, { 0x0002, 2 }, { 0x0000, 1 }, { 0x0002, 3 }, { 0x0001, 2 }, { 0x0001, 1 }, { 0x0007, 4 }, { 0x000f, 4 },     },
/* state 9 */
        {       { 0x002b, 6 }, { 0x000b, 4 }, { 0x0003, 4 }, { 0x000b, 5 }, { 0x0007, 3 }, { 0x001b, 5 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x0002, 2 }, { 0x000a, 4 }, { 0x0002, 3 }, { 0x0000, 1 }, { 0x0001, 2 }, { 0x0001, 1 }, { 0x0007, 4 }, { 0x000f, 4 },     },
/* state 10 */
        {       { 0x0057, 7 }, { 0x0017, 5 }, { 0x0007, 5 }, { 0x0017, 6 }, { 0x000f, 4 }, { 0x0037, 6 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x0005, 3 }, { 0x0001, 1 }, { 0x0000, 1 }, { 0x0001, 2 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 11 */
        {       { 0x0057, 7 }, { 0x0017, 5 }, { 0x0007, 5 }, { 0x0017, 6 }, { 0x000f, 4 }, { 0x0037, 6 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x0001, 1 }, { 0x0005, 3 }, { 0x0001, 2 }, { 0x0000, 1 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 12 */
        {       { 0x0015, 5 }, { 0x0005, 3 }, { 0x0001, 3 }, { 0x0005, 4 }, { 0x0003, 2 }, { 0x000d, 4 }, { 0x0001, 2 }, { 0x0001, 1 }, { 0x002b, 6 }, { 0x000b, 4 }, { 0x0003, 4 }, { 0x000b, 5 }, { 0x0000, 1 }, { 0x001b, 5 }, { 0x0003, 3 }, { 0x0007, 3 },     },
/* state 13 */
        {       { 0x0015, 5 }, { 0x0005, 3 }, { 0x0001, 3 }, { 0x0005, 4 }, { 0x0003, 2 }, { 0x000d, 4 }, { 0x0001, 2 }, { 0x0001, 1 }, { 0x002b, 6 }, { 0x000b, 4 }, { 0x0003, 4 }, { 0x000b, 5 }, { 0x0000, 1 }, { 0x001b, 5 }, { 0x0003, 3 }, { 0x0007, 3 },     },
/* state 14 */
        {       { 0x0057, 7 }, { 0x0017, 5 }, { 0x0007, 5 }, { 0x0017, 6 }, { 0x000f, 4 }, { 0x0037, 6 }, { 0x0007, 4 }, { 0x0007, 3 }, { 0x0005, 3 }, { 0x0001, 1 }, { 0x0000, 1 }, { 0x0001, 2 }, { 0x0003, 3 }, { 0x0003, 2 }, { 0x000f, 5 }, { 0x001f, 5 },     },
/* state 15 */
        {       { 0x002a, 6 }, { 0x000a, 4 }, { 0x0002, 4 }, { 0x000a, 5 }, { 0x0006, 3 }, { 0x001a, 5 }, { 0x0002, 3 }, { 0x0002, 2 }, { 0x0056, 7 }, { 0x0016, 5 }, { 0x0006, 5 }, { 0x0016, 6 }, { 0x0000, 1 }, { 0x0036, 6 }, { 0x0006, 4 }, { 0x0001, 1 },     },
};

#endif /* NEED_JTAG_TAP_SEQUENCE_TABLE */
